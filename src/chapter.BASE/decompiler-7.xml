<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="decompiler">
      <title>Decompiler</title>
      <code-fragment id="base.methods">
  public void minMaxTableToXMLCount (int offset, int [] counts) {
    counts [offset]++;
    if (counts [offset] &gt; 1) {
      return; }

    if (getOffset (offset) != 0) {
      baseCoordTableToXMLCount (getOffset (offset, 0), counts); }
    if (getOffset (offset + 2) != 0) {
      baseCoordTableToXMLCount (getOffset (offset, 2), counts); }
    for (int i = 0; i &lt; getuint16 (offset + 4); i++) {
      if (getOffset (offset + 6 + 8*i + 4) != 0) {
        baseCoordTableToXMLCount (getOffset (offset, 6 + 8*i + 4),
                                  counts); }
      if (getOffset (offset + 6 + 8*i + 6) != 0) {
        baseCoordTableToXMLCount (getOffset (offset, 6 + 8*i + 6),
                                  counts); }}
  }

  public void minMaxTableOffsetToXML (DecompilerConfig conf, int offset,
                                      int [] counts,
                                      String element, AttributesImpl at)
      throws org.xml.sax.SAXException, InvalidFontException {

    if (counts [offset] != 1) {
      at.addAttribute ("", "name", "name", "CDATA",
                       "minMaxTable_" + Integer.toHexString (offset));
      conf.ch.element (element, at); }

    else {
      minMaxTableToXMLEmit (conf, offset, counts, element, at); }
  }

  public void minMaxTableToXML (DecompilerConfig conf, int offset,
                                int[] counts)
      throws org.xml.sax.SAXException, InvalidFontException {

    if (counts [offset] &gt; 1) {
      AttributesImpl at = new AttributesImpl ();
      at.addAttribute ("", "id", "id", "CDATA",
                       "minMaxTable_" + Integer.toHexString (offset));
      minMaxTableToXMLEmit (conf, offset, counts,
                            "minMaxTable", at);
      counts [offset] = 0; }

    if (getOffset (offset) != 0) {
      baseCoordTableToXML (conf, getOffset (offset, 0), counts); }
    if (getOffset (offset + 2) != 0) {
      baseCoordTableToXML (conf, getOffset (offset, 2), counts); }
    for (int i = 0; i &lt; getuint16 (offset + 4); i++) {
      if (getOffset (offset + 6 + 8*i + 4) != 0) {
        baseCoordTableToXML (conf, getOffset (offset, 6 + 8*i + 4),
                             counts); }
      if (getOffset (offset + 6 + 8*i + 6) != 0) {
        baseCoordTableToXML (conf, getOffset (offset, 6 + 8*i + 6),
                             counts); }}
  }

  public void minMaxTableToXMLEmit (DecompilerConfig conf, int offset,
                                    int[] counts,
                                    String element, AttributesImpl at)
      throws org.xml.sax.SAXException, InvalidFontException {

    conf.ch.startElement (element, at); {
      if (getOffset (offset) != 0) {
        at = new AttributesImpl ();
        baseCoordTableOffsetToXML (conf, getOffset (offset, 0), counts,
                                   "minCoord", at); }

      if (getOffset (offset + 2) != 0) {
        at = new AttributesImpl ();
        baseCoordTableOffsetToXML (conf, getOffset (offset, 2), counts,
                                   "maxCoord", at); }

      for (int i = 0; i &lt; getuint16 (offset + 4); i++) {
        at = new AttributesImpl ();
        conf.ch.startElement ("featMinMax", at); {

          at = new AttributesImpl ();
          at.addAttribute ("", "v", "v", "CDATA",
                           Tag.tag2string (getuint32 (offset + 6 + 8*i)));
          conf.ch.element ("tag", at);

          if (getOffset (offset + 6 + 8*i + 4) != 0) {
            at = new AttributesImpl ();
            baseCoordTableOffsetToXML (conf, getOffset (offset, 6 + 8*i + 4),
                                       counts, "minCoord", at); }

          if (getOffset (offset + 6 + 8*i + 6) != 0) {
            at = new AttributesImpl ();
            baseCoordTableOffsetToXML (conf, getOffset (offset, 6 + 8*i + 6),
                                       counts, "maxCoord", at); }

          conf.ch.endElement ("featMinMax"); }}

      conf.ch.endElement (element); }
  }
</code-fragment>
    </section>
  
