<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="compiler">
      <title>Compiler</title>
      <code-fragment id="os2.methods"><code-title>?</code-title>
  public static final int[] tableSize = {78, 86, 96, 96, 96, 100 };

  public void fromXML (Element os2)
      throws InvalidFontException, UnsupportedFontException {

    int version = Integer.decode (os2.getAttribute ("version")).intValue ();

    if (version &lt; 0 || 5 &lt; version) {
      throw new InvalidFontException ("invalid OS/2 version"); }

    Block me = new Block (tableSize [version], 0);

    me.setuint16 (0, version);

    NodeList children = os2.getChildNodes ();
    for (int i = 0; i &lt; children.getLength (); i++) {
      Element e = (Element) children.item (i);
      int j, mask;

      if ("avgCharWidth".equals (e.getTagName ())) {
        int avgCharWidth = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (2, avgCharWidth); }

      else if ("weightClass".equals (e.getTagName ())) {
        int weightClass = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (4, weightClass); }

      else if ("widthClass".equals (e.getTagName ())) {
        int widthClass = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (6, widthClass); }

      else if ("fsType".equals (e.getTagName ())) {
        int format = fsType_version2format [version];
        int fsType = 0;
        for (j = 0; j &lt; fsTypeNames.length; j++) {
          if (fsTypeNames [j][format] != null) {
            if ("yes".equals (e.getAttribute (fsTypeNames [j][format]))) {
              fsType |= 1 &lt;&lt; j; }}}
        me.setint16 (8, fsType); }

      else if ("subscript".equals (e.getTagName ())) {
        int xsize = Integer.decode (e.getAttribute ("xsize")).intValue();
        int ysize = Integer.decode (e.getAttribute ("ysize")).intValue();
        int xoffset = Integer.decode (e.getAttribute ("xoffset")).intValue();
        int yoffset = Integer.decode (e.getAttribute ("yoffset")).intValue();
        me.setint16 (10, xsize);
        me.setint16 (12, ysize);
        me.setint16 (14, xoffset);
        me.setint16 (16, yoffset); }

      else if ("superscript".equals (e.getTagName ())) {
        int xsize = Integer.decode (e.getAttribute ("xsize")).intValue();
        int ysize = Integer.decode (e.getAttribute ("ysize")).intValue();
        int xoffset = Integer.decode (e.getAttribute ("xoffset")).intValue();
        int yoffset = Integer.decode (e.getAttribute ("yoffset")).intValue();
        me.setint16 (18, xsize);
        me.setint16 (20, ysize);
        me.setint16 (22, xoffset);
        me.setint16 (24, yoffset); }

      else if ("strikeout".equals (e.getTagName ())) {
        int size = Integer.decode (e.getAttribute ("size")).intValue();
        int position = Integer.decode (e.getAttribute ("position")).intValue();
        me.setint16 (26, size);
        me.setint16 (28, position); }

      else if ("familyClass".equals (e.getTagName ())) {
        int cl = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (30, cl); }

      else if ("panose".equals (e.getTagName ())) {
        int familyType = Integer.decode (e.getAttribute ("familyType")).intValue();
        int serifStyle = Integer.decode (e.getAttribute ("serifStyle")).intValue();
        int weight     = Integer.decode (e.getAttribute ("weight")).intValue();
        int proportion = Integer.decode (e.getAttribute ("proportion")).intValue();
        int contrast  = Integer.decode (e.getAttribute ("contrast")).intValue();
        int strokeVariation = Integer.decode (e.getAttribute ("strokeVariation")).intValue();
        int armStyle   = Integer.decode (e.getAttribute ("armStyle")).intValue();
        int letterform = Integer.decode (e.getAttribute ("letterform")).intValue();
        int midline    = Integer.decode (e.getAttribute ("midline")).intValue();
        int xHeight    = Integer.decode (e.getAttribute ("xHeight")).intValue();

        me.setuint8 (32, familyType);
        me.setuint8 (33, serifStyle);
        me.setuint8 (34, weight);
        me.setuint8 (35, proportion);
        me.setuint8 (36, contrast);
        me.setuint8 (37, strokeVariation);
        me.setuint8 (38, armStyle);
        me.setuint8 (39, letterform);
        me.setuint8 (40, midline);
        me.setuint8 (41, xHeight); }

      else if ("unicodeRange".equals (e.getTagName ())) {
        int[] range = {0, 0, 0, 0};
        for (int r = 0; r &lt; unicodeRangeNames.length; r++) {
          if (unicodeRangeNames [r][version] != null) {
	    if ("yes".equals (e.getAttribute (unicodeRangeNames [r][version]))) {
              range [r / 32] |= (1 &lt;&lt; (r % 32)); }}}
        me.setuint32 (42, range [0]);
        me.setuint32 (46, range [1]);
        me.setuint32 (50, range [2]);
        me.setuint32 (54, range [3]); }

      else if ("vendID".equals (e.getTagName ())) {
        String id = e.getAttribute ("v");
        me.setTag (58, id); }

      else if ("fsSelection".equals (e.getTagName ())) {
        int format = fsSelectionNames_version2format [version];
        int fsSelection = 0;
        for (j = 0; j &lt; fsSelectionNames.length; j++) {
          if (fsSelectionNames [j][format] != null) {
            if ("yes".equals (e.getAttribute (fsSelectionNames [j][format]))) {
              fsSelection |= 1 &lt;&lt; j; }}}
        me.setuint16 (62, fsSelection); }

      else if ("charIndex".equals (e.getTagName ())) {
        int first = Integer.decode (e.getAttribute ("first")).intValue();
        int last  = Integer.decode (e.getAttribute ("last")).intValue();
        me.setuint16 (64, first);
        me.setuint16 (66, last); }

      else if ("typo".equals (e.getTagName ())) {
        int ascender = Integer.decode (e.getAttribute ("ascender")).intValue();
        int descender = Integer.decode (e.getAttribute ("descender")).intValue();
        int linegap = Integer.decode (e.getAttribute ("linegap")).intValue();
        me.setint16 (68, ascender);
        me.setint16 (70, descender);
        me.setint16 (72, linegap); }

      else if ("win".equals (e.getTagName ())) {
        int ascent = Integer.decode (e.getAttribute ("ascent")).intValue();
        int descent = Integer.decode (e.getAttribute ("descent")).intValue();
        me.setint16 (74, ascent);
        me.setint16 (76, descent); }

      else if ("codePageRange".equals (e.getTagName ())) {
        int format = cpNames_version2format [version];
        int[] cp = {0, 0};
        for (int r = 0; r &lt; cpNames.length; r++) {
          if (cpNames [r][format] != null) {
            if ("yes".equals (e.getAttribute (cpNames [r][format]))) {
              cp [r / 32] |= (1 &lt;&lt; (r %32)); }}}
        me.setuint32 (78, cp [0]);
        me.setuint32 (82, cp [1]); }

      else if ("height".equals (e.getTagName ())) {
        int h = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (86, h); }

      else if ("capHeight".equals (e.getTagName ())) {
        int h = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (88, h); }

      else if ("defaultChar".equals (e.getTagName ())) {
        int c = Integer.decode (e.getAttribute ("v")).intValue();
        me.setuint16 (90, c); }

      else if ("breakChar".equals (e.getTagName ())) {
        int c = Integer.decode (e.getAttribute ("v")).intValue();
        me.setint16 (92, c); }

      else if ("maxContext".equals (e.getTagName ())) {
        int m = Integer.decode (e.getAttribute ("v")).intValue();
        me.setuint16 (94, m); }

      else if ("lowerOpticalPointSize".equals (e.getTagName ())) {
        int v = Integer.decode (e.getAttribute ("v")).intValue();
        me.setuint16 (96, v); }

      else if ("upperOpticalPointSize".equals (e.getTagName ())) {
        int v = Integer.decode (e.getAttribute ("v")).intValue();
        me.setuint16 (98, v); }}

    data = me.serialize ();
  }
</code-fragment>
    </section>
    
