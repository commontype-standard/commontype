<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="implementation">
      <title>Implementation</title>
      <code-fragment id="cmap_format12"><code-title>Return glyph for 'charCode', using format 12 subtable at
     'stOffset'</code-title>
{ int nGroups = (int)getuint32 (stOffset + 12);
  int min = 0;
  int max = nGroups - 1;
  while (min &lt;= max) {
    int s = (min + max) / 2;
    int startCharCode = (int) getuint32 (stOffset + 16 + 12*s);
    int endCharCode = (int) getuint32 (stOffset + 16 + 12*s + 4);

    if (charCode &lt; startCharCode) {
      max = s - 1; }
    else if (endCharCode &lt; charCode) {
      min = s + 1; }
    else {
      int startGlyphID = (int) getuint32 (stOffset + 16 + 12*s + 8);
      return (startGlyphID + (charCode - startCharCode)); }}
  return 0;
}
</code-fragment>
      <code-fragment id="cmap_format12_iterator"><code-title>Enumerate mappings in format 12 subtable at stOffset</code-title>
  { java.util.TreeMap&lt;Integer, Integer&gt; m
        = new java.util.TreeMap&lt;Integer, Integer&gt; ();

    int nGroups = (int)getuint32 (stOffset + 12);

    for (int g = 0; g &lt; nGroups; g++) {

      int startCode = (int)getuint32 (stOffset + 16 + 12*g);
      int endCode = (int)getuint32 (stOffset + 16 + 12*g + 4);
      int glyphID = (int)getuint32 (stOffset + 16 + 12*g + 8);

      for (int c = startCode; c &lt;= endCode; c++) {
        if (from &lt;= c &amp;&amp; (c &lt;= to || to == -1)) {
          m.put (c, glyphID); }
        glyphID++; }}

     return m; }
</code-fragment>
      <code-fragment id="cmap_format12_inv"><code-title>Return character for 'glyphID', using format 12 subtable
  at stOffset</code-title>
{ int nGroups = (int) getuint32 (stOffset + 12);
  for (int i = 0; i &lt; nGroups; i++) {
    int startCharCode = (int) getuint32 (stOffset + 16 + 12*i);
    int endCharCode = (int) getuint32 (stOffset + 16 + 12*i + 4);
    int startGlyphID = (int) getuint32 (stOffset + 16 + 12*i + 8);

    if (   glyphID &gt;= startGlyphID
        &amp;&amp; (glyphID - startGlyphID) &lt;= (endCharCode - startCharCode)) {
      return (startCharCode + (glyphID - startGlyphID)); }}

  return -1;
}
</code-fragment>
    </section>
    
