<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="implementation">
      <title>Implementation</title>
      <para>Here is our binary search to compute the coverage index
          of a glyph. The loop invariant is that a glyph is in the
          GlyphArray iff its position in it is between min and max
          (included).</para>
      <code-fragment id="LayoutTable_getCoverageIndex1"><code-title>Return the coverage index for a format 1 Coverage table</code-title>
  { int min = 0;
    int max = getuint16 (coverageOffset + 2) - 1;

    while (min &lt;= max) {
      int mid = (min + max) / 2;
      int g = getGlyphID (coverageOffset + 4 + 2*mid);

      if (glyphID &lt; g) {
        max = mid - 1; }
      else if (g &lt; glyphID) {
        min = mid + 1; }
      else {
        return mid; }}

    return -1; }
</code-fragment>
      <para>Building the list of covered glyphs is straithforward:</para>
      <code-fragment id="LayoutTable_getCoveredGlyphs1"><code-title>Return the glyphs covered by a format 1 Coverage table</code-title>
  { int glyphCount = getuint16 (coverageOffset + 2);
    int[] glyphs = new int [glyphCount];
    for (int i = 0; i &lt; glyphCount; i++) {
      glyphs [i] = getGlyphID (coverageOffset + 4 + 2*i); }
    return glyphs; }
</code-fragment>
    </section>
  
