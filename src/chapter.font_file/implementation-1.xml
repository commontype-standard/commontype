<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="implementation">
      <title>Implementation</title>
      <para>Note that some of the offsets are of type 'Offset' and
        are 16 bit quantities, while other offsets are of type 'ULONG'
        and are 32 bit quantities. Since we represent a table in an
        array, we are limited to Java-int offsets, so we have to
        verify ULONG offsets.</para>
      <code-fragment id="table.methods"><code-title>Data Access routines</code-title>
  protected final int getuint8 (int offset) {
    int x = data [offset];
    if (x &lt; 0) {
      x += 256; }
    return x;
  }

  protected final int getint8 (int offset) {
    return data [offset];
  }

  protected final void setuint8 (int offset, int v) {
    data [offset] = (byte) (v &amp; 0xff);
  }

  protected final int getuint16 (int offset) {
    int b1 = ((int)(getuint8 (offset    ))) &lt;&lt;  8;
    int b2 = ((int)(getuint8 (offset + 1)));
    return (b1 | b2);
  }

  protected final void setuint16 (int offset, int v) {
    data [offset]   = (byte) ((v &gt;&gt; 8) &amp; 0xff);
    data [offset+1] = (byte) ((v     ) &amp; 0xff);
  }

  protected final void setint16 (int offset, int v) {
    setuint16 (offset, v); }

  protected final int getuint24 (int offset) {
    int b1 = ((int)(getuint8 (offset    ))) &lt;&lt; 16;
    int b2 = ((int)(getuint8 (offset + 1))) &lt;&lt;  8;
    int b3 = ((int)(getuint8 (offset + 2)));
    return (b1 | b2 | b3);
  }

  protected final int getGlyphID (int offset) {
    return getuint16 (offset);
  }

  protected final int getint16 (int offset) {
    int x = ((int)data [offset]) * 256;
    return x + getuint8 (offset + 1);
  }

  protected final int getOffset (int offset) {
    return getuint16 (offset);
  }

  protected final int getOffset (int base, int offset) {
    if (getOffset (base + offset) != 0) {
      return base + getOffset (base + offset); }
    else {
      return 0; }
  }

  protected final long getuint32 (int offset) {
    long b1 = ((long)(getuint8 (offset    ))) &lt;&lt; 24;
    long b2 = ((long)(getuint8 (offset + 1))) &lt;&lt; 16;
    long b3 = ((long)(getuint8 (offset + 2))) &lt;&lt;  8;
    long b4 = ((long)(getuint8 (offset + 3)));
    return (b1 | b2 | b3 | b4);
  }

  protected final int getint32 (int offset) {
    int x = ((int)data [offset]) * 256;
    x = (x + getuint8 (offset + 1)) * 256;
    x = (x + getuint8 (offset + 2)) * 256;
    return x + getuint8 (offset + 3);
  }

  protected final void setuint32 (int offset, int value) {
    data [offset]   = (byte) ((value &gt;&gt; 24) &amp; 0xff);
    data [offset+1] = (byte) ((value &gt;&gt; 16) &amp; 0xff);
    data [offset+2] = (byte) ((value &gt;&gt;  8) &amp; 0xff);
    data [offset+3] = (byte) (value         &amp; 0xff);
  }

  protected final void setint32 (int offset, int value) {
    data [offset]   = (byte) ((value &gt;&gt; 24) &amp; 0xff);
    data [offset+1] = (byte) ((value &gt;&gt; 16) &amp; 0xff);
    data [offset+2] = (byte) ((value &gt;&gt;  8) &amp; 0xff);
    data [offset+3] = (byte) (value         &amp; 0xff);
  }

  protected final int getLOffset (int offset) {
    long o = getuint32 (offset);
    if (o &gt; Integer.MAX_VALUE) {
      System.out.println ("Offset too big!"); }
    return (int) o;
  }

  protected final int getLOffset (int base, int offset) {
    if (getLOffset (base + offset) != 0) {
      return base + getLOffset (base + offset); }
    else {
      return 0; }
  }

  protected final int[] getFixed (int offset) {
    int[] result = new int[2];
    result[0] = getuint16 (offset);
    result[1] = getuint16 (offset + 2);
    return result;
  }

  protected final void setFixed (int offset, int major, int minor) {
    setuint16 (offset, major);
    setuint16 (offset + 2, minor);
  }

  protected final int getFWord (int offset) {
    return getint16 (offset);
  }

  protected final int getuFWord (int offset) {
    return getuint16 (offset);
  }

  protected final long getLONGDATETIME (int offset) {
    long x = getint32 (offset) &lt;&lt; 32;
    x += getuint32 (offset + 4);
    return x;
  }

  public void setLONGDATETIME (int offset, long date) {
    data [offset+0] = (byte) ((date &gt;&gt; 56) &amp; 0xff);
    data [offset+1] = (byte) ((date &gt;&gt; 48) &amp; 0xff);
    data [offset+2] = (byte) ((date &gt;&gt; 40) &amp; 0xff);
    data [offset+3] = (byte) ((date &gt;&gt; 32) &amp; 0xff);
    data [offset+4] = (byte) ((date &gt;&gt; 24) &amp; 0xff);
    data [offset+5] = (byte) ((date &gt;&gt; 16) &amp; 0xff);
    data [offset+6] = (byte) ((date &gt;&gt;  8) &amp; 0xff);
    data [offset+7] = (byte) ((date      ) &amp; 0xff);
  }

  /** return the uint32 at <code>offset</code> in the table
   * as an int.
   * @param offset the offset of the uint32
   * @param exceptionMsg the detail message for the exception, if thrown
   * @throws  UnsupportedFontException if the value
   * cannot be represented in an int.
   */
  protected final int getuint32asint (int offset, String exceptionMsg)
      throws UnsupportedFontException {
    if (getuint8 (offset) &gt; 0x7f) {
      throw new UnsupportedFontException (exceptionMsg); }
    return (int) getuint32 (offset);
  }
</code-fragment>
      <para>Here is a class in which we collect common tag
          values:</para>
      <code-fragment package="com.adobe.aots.CommonType" class="Tag">
package com.adobe.aots.CommonType;

public class Tag {
  static public final long ttcf = 0x74746366;

  static public final long BASE = 0x42415345;
  static public final long CFF  = 0x43464620;
  static public final long DSIG = 0x44534947;
  static public final long GDEF = 0x47444546;
  static public final long GPOS = 0x47504f53;
  static public final long GSUB = 0x47535542;
  static public final long VORG = 0x564f5247;
  static public final long cmap = 0x636d6170;
  static public final long cvt  = 0x63767420;
  static public final long head = 0x68656164;
  static public final long hhea = 0x68686561;
  static public final long hdmx = 0x68646d78;
  static public final long hmtx = 0x686d7478;
  static public final long vhea = 0x76686561;
  static public final long vmtx = 0x766d7478;
  static public final long fpgm = 0x6670676d;
  static public final long glyf = 0x676c7966;
  static public final long loca = 0x6c6f6361;
  static public final long maxp = 0x6d617870;
  static public final long name = 0x6e616d65;
  static public final long os2  = 0x4f532f32;   // OS/2
  static public final long post = 0x706f7374;
  static public final long prep = 0x70726570;
  static public final long VDMX = 0x56444d58;

  // script tags

  static public final long arab = 0x61726162;
  static public final long armn = 0x61726d6e;
  static public final long beng = 0x62656e67;
  static public final long bopo = 0x626f706f;
  static public final long brai = 0x62726169;
  static public final long byzm = 0x62797a6d;
  static public final long cans = 0x63616e73;
  static public final long cher = 0x63686572;
  static public final long hani = 0x68616e69;
  static public final long cyrl = 0x6379726c;
  static public final long deva = 0x64657661;
  static public final long ethi = 0x65746869;
  static public final long geor = 0x67656f72;
  static public final long grek = 0x6772656b;
  static public final long gujr = 0x67756a72;
  static public final long guru = 0x67757277;
  static public final long jamo = 0x6a6a6d6f;
  static public final long hang = 0x68616e67;
  static public final long hebr = 0x68656272;
  static public final long knda = 0x6b6e6461;
  static public final long latn = 0x6c61746e;
  static public final long mlym = 0x6d6c796d;
  static public final long mymr = 0x6d796d72;
  static public final long telu = 0x74656c75;
  static public final long thai = 0x74686169;


  static public final long ARA  = 0x41524120;
  static public final long BEN  = 0x42454e20;
  static public final long BRM  = 0x42524d20;
  static public final long ELL  = 0x454c4c20;
  static public final long ENG  = 0x454e4720;
  static public final long GAE  = 0x47414520;
  static public final long GUJ  = 0x47554a20;
  static public final long HIN  = 0x48494e20;
  static public final long HYE  = 0x48594520;
  static public final long IWR  = 0x49575220;
  static public final long JAN  = 0x4a414e20;
  static public final long KAN  = 0x4b414e20;
  static public final long KOR  = 0x4b4f5220;
  static public final long MAL  = 0x4d414c20;
  static public final long MAR  = 0x4d415220;
  static public final long MLR  = 0x4d4c5220;
  static public final long PAL  = 0x50414c20;
  static public final long PAN  = 0x50414e20;
  static public final long PTG  = 0x50544720;
  static public final long ROM  = 0x524f4d20;
  static public final long RUS  = 0x52555320;
  static public final long SAN  = 0x53414e20;
  static public final long TEL  = 0x54454c20;
  static public final long THA  = 0x54484120;
  static public final long TUR  = 0x54555220;
  static public final long VIT  = 0x56495420;
  static public final long ZHS  = 0x5a485320;
  static public final long ZHT  = 0x5a485420;

  static public final long abvm = 0x6162766d;
  static public final long abvs = 0x61627673;
  static public final long akhn = 0x616b686e;
  static public final long blwf = 0x626c7766;
  static public final long blwm = 0x626c776d;
  static public final long blws = 0x626c7773;
  static public final long calt = 0x63616c74;
  static public final long ccmp = 0x63636d70;
  static public final long clig = 0x636c6967;
  static public final long cswh = 0x63737768;
  static public final long curs = 0x63757273;
  static public final long dist = 0x64697374;
  static public final long dlig = 0x646c6967;
  static public final long dnom = 0x646e6f6d;
  static public final long fina = 0x66696e61;
  static public final long frac = 0x66726163;
  static public final long half = 0x68616c66;
  static public final long haln = 0x68616c6e;
  static public final long init = 0x696e6974;
  static public final long isol = 0x69736f6c;
  static public final long kern = 0x6b65726e;
  static public final long liga = 0x6c696761;
  static public final long locl = 0x6c6f636c;
  static public final long mark = 0x6d61726b;
  static public final long medi = 0x6d656469;
  static public final long mkmk = 0x6d6b6d6b;
  static public final long mset = 0x6d736574;
  static public final long nukt = 0x6e756b74;
  static public final long numr = 0x6e756d72;
  static public final long onum = 0x6f6e756d;
  static public final long pnum = 0x706e756d;
  static public final long pres = 0x70726573;
  static public final long pstf = 0x70737466;
  static public final long psts = 0x70737473;
  static public final long rlig = 0x726c6967;
  static public final long rphf = 0x72706866;
  static public final long size = 0x73697a65;
  static public final long subs = 0x73756273;
  static public final long sups = 0x73757073;
  static public final long vatu = 0x76617475;

  public static String tag2string (long tag) {
    char[] chars = new char[4];
    for (int i = 3; i &gt;= 0; i--) {
      chars [i] = (char)(tag &amp; 0xff);
      if (chars [i] == 0x0) {
        chars [i] = 0x20; }
      tag = tag &gt;&gt; 8; }
    return new String (chars);
  }

  public static long string2tag (String s) {
    String t = s + "    ";
    long result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) + t.charAt (i); }
    return result;
  }

  public static long[] string2tags (String s) {
    String[] tags = s.split (",");
    long[] result = new long [tags.length];
    for (int i = 0; i &lt; result.length; i++) {
      result [i] = string2tag (tags[i].trim ()); }
    return result;
  }
}
</code-fragment>
    </section>
  
