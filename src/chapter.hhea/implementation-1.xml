<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="implementation">
      <title>Implementation</title>
      <para>Here is the class definition for <ottable>hhea</ottable>
          tables:</para>
      <code-fragment package="com.adobe.aots.CommonType" class="Hhea"><code-title>Hhea class</code-title>
package com.adobe.aots.CommonType;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.helpers.AttributesImpl;

import com.adobe.aots.util.ContentHandlerPlus;

public class Hhea extends Table {

  public Hhea () {
    super (Tag.hhea, null);
  }

  public Hhea (Font font) {
    super (Tag.hhea, font);
  }

  <code-include linkend="hhea.methods"/>
}
</code-fragment>
      <para>We have simple accessor functions:</para>
      <code-fragment id="hhea.methods"><code-title>Hhea class</code-title>
  public int getAscender () {
    return getint16 (4);
  }

  public void setAscender (int v) {
    setint16 (4, v);
  }

  public int getDescender () {
    return getint16 (6);
  }

  public void setDescender (int v) {
    setint16 (6, v);
  }

  public int getLineGap () {
    return getint16 (8);
  }

  public void setLineGap (int v) {
    setint16 (8, v);
  }

  public int getAdvanceWidthMax () {
    return getuint16 (10);
  }

  public void setAdvanceWidthMax (int aw) {
    setuint16 (10, aw);
  }

  public int getMinLeftSideBearing () {
    return getuint16 (12);
  }

  public void setMinLeftSideBearing (int lsb) {
    setuint16 (12, lsb);
  }

  public int getMinRightSideBearing () {
    return getuint16 (14);
  }

  public void setMinRightSideBearing (int rsb) {
    setuint16 (14, rsb);
  }

  public int getXMaxExtent () {
    return getuint16 (14);
  }

  public void setXMaxExtent (int xme) {
    setuint16 (16, xme);
  }

  public int getNumberOfHMetrics () {
    return getuint16 (34);
  }

  public void setNumberOfHMetrics (int n) {
    setuint16 (34, n);
  }

</code-fragment>
      <code-fragment id="hhea.methods"><code-title>Hhea class</code-title>
  public void fixDerivedValues () {
    int advanceWidthMax = 0;
    int minLeftSideBearing = Integer.MAX_VALUE;
    int minRightSideBearing = Integer.MAX_VALUE;
    int xMaxExtent = Integer.MIN_VALUE;

    for (int gid = 0; gid &lt; font.maxp.getNumGlyphs (); gid++) {
      int aw = font.hmtx.getHorizontalAdvance (gid);
      int lsb = font.hmtx.getLeftSideBearing (gid);
      BoundingBox bb
        = font.cff != null
        ? font.cff.getContoursBoundingBox (gid)
        : font.glyf.getGlyfBoundingBox (gid);
      int extent = (int) Math.ceil (bb.xmax - bb.xmin);

      advanceWidthMax = Math.max (advanceWidthMax, aw);
      minLeftSideBearing = Math.min (minLeftSideBearing, lsb);
      minRightSideBearing = Math.min (minRightSideBearing, aw - (lsb + extent));
      xMaxExtent = Math.max (xMaxExtent, lsb + extent); }

    setAdvanceWidthMax (advanceWidthMax);
    setMinLeftSideBearing (minLeftSideBearing);
    setMinRightSideBearing (minRightSideBearing);
    setXMaxExtent (xMaxExtent);
  }
</code-fragment>
    </section>
  
