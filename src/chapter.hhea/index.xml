<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section id="chapter.hhea">
    <title>hhea - Horizontal Header</title>

    <section role="fragment">
      <title>Introduction</title>

      <!--____________________________________________________________________-->
      <section role="specification">
        <title>Specification</title>

        <para>This table contains information for horizontal layout.
          The values in the minRightSidebearing, minLeftSideBearing
          and xMaxExtent should be computed using
          <emphasis>only</emphasis> glyphs that have contours. Glyphs
          with no contours should be ignored for the purposes of these
          calculations. All reserved areas must be set to 0.</para>

        <otformat>
          <otfield>
            <otfieldoffs>0</otfieldoffs>
            <otfieldtype>Fixed</otfieldtype>
            <otfieldname>Table</otfieldname>
            <otfielddesc>version number 0x00010000 for version
              1.0.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>4</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>Ascender</otfieldname>
            <otfielddesc>Typographic ascent (<ulink url="http://developer.apple.com/fonts/TTRefMan/RM06/Chap6hhea.html">Distance
            from baseline to highest ascender</ulink>)</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>6</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>Descender</otfieldname>
            <otfielddesc>Typographic descent(<ulink url="http://developer.apple.com/fonts/TTRefMan/RM06/Chap6hhea.html">Distance
            from baseline to highest ascender</ulink>)</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>8</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>LineGap</otfieldname>
            <otfielddesc>Typographic line gap. Negative LineGap values are
              treated as zero in Windows 3.1, System 6, and System
              7.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>10</otfieldoffs>
            <otfieldtype>UFWORD</otfieldtype>
            <otfieldname>advanceWidthMax</otfieldname>
            <otfielddesc>Maximum advance width value in
              <ottable>hmtx</ottable> table.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>12</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>minLeftSideBearing</otfieldname>
            <otfielddesc>Minimum left sidebearing value in
              <ottable>hmtx</ottable> table.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>14</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>minRightSideBearing</otfieldname>
            <otfielddesc>Minimum right sidebearing value; calculated
              as Min(aw - lsb - (xMax - xMin)).</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>16</otfieldoffs>
            <otfieldtype>FWORD</otfieldtype>
            <otfieldname>xMaxExtent</otfieldname>
            <otfielddesc>Max(lsb + (xMax - xMin)).</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>18</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>caretSlopeRise</otfieldname>
            <otfielddesc>Used to calculate the slope of the cursor
              (rise/run); 1 for vertical.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>20</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>caretSlopeRun</otfieldname>
            <otfielddesc>0 for vertical.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>22</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>caretOffset</otfieldname>
            <otfielddesc>The amount by which a slanted highlight on a
              glyph needs to be shifted to produce the best
              appearance. Set to 0 for non-slanted
              fonts.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>24</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>(reserved)</otfieldname>
            <otfielddesc>set to 0.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>26</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>(reserved)</otfieldname>
            <otfielddesc>set to 0.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>28</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>(reserved)</otfieldname>
            <otfielddesc>set to 0.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>30</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>(reserved)</otfieldname>
            <otfielddesc>set to 0.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>32</otfieldoffs>
            <otfieldtype>SHORT</otfieldtype>
            <otfieldname>metricDataFormat</otfieldname>
            <otfielddesc>0 for current format.</otfielddesc>
          </otfield>
          <otfield>
            <otfieldoffs>34</otfieldoffs>
            <otfieldtype>USHORT</otfieldtype>
            <otfieldname>numberOfHMetrics</otfieldname>
            <otfielddesc>Number of hMetric entries in
              <ottable>hmtx</ottable> table.</otfielddesc>
          </otfield>
        </otformat>

	<para>Note: The ascender, descender and linegap values in this
	  table are Apple specific. Also, see information in the
	  <ottable>OS/2</ottable> table.</para>
      </section>

      <!--________________________________________________________________-->
      <section role="xml-representation">
        <title>XML Representation</title>

<code-fragment id="schema">
  <code-title>??</code-title>
hhea =
  element hhea {
    attribute major { text },
    attribute minor { text },
    element macLineMetrics {
      attribute ascent { text },
      attribute descent { text },
      attribute lineGap { text }
    },
    element advanceWidthMax {
      attribute v { text }
    },
    element minLeftSideBearing {
      attribute v { text }
    },
    element minRightSideBearing {
      attribute v { text }
    },
    element xMaxExtent {
      attribute v { text }
    },
    element caret {
      attribute slopeRise { text },
      attribute slopeRun { text },
      attribute offset { text }
    },
    element numberOfHMetrics {
      attribute v { text }
    }
  }
</code-fragment>
      </section>

      <!--____________________________________________________________________-->
      <section role="compiler">
        <title>Compiler</title>

<code-fragment id="hhea.methods">
  public void fromXML (Element hhea)
      throws InvalidFontException, UnsupportedFontException {

    Block me = new Block (36, 0);

    me.setFixed (0,
                 Integer.decode (hhea.getAttribute (&quot;major&quot;)).intValue (),
                 Integer.decode (hhea.getAttribute (&quot;minor&quot;)).intValue ());

    NodeList children = hhea.getChildNodes ();
    for (int i = 0; i &lt; children.getLength (); i++) {
      Element e = (Element) children.item (i);

      if (&quot;macLineMetrics&quot;.equals (e.getTagName ())) {
        me.setFWord (4, Integer.decode (e.getAttribute (&quot;ascent&quot;)).intValue());
        me.setFWord (6, Integer.decode (e.getAttribute (&quot;descent&quot;)).intValue());
        me.setFWord (8, Integer.decode (e.getAttribute (&quot;lineGap&quot;)).intValue()); }

      if (&quot;advanceWidthMax&quot;.equals (e.getTagName ())) {
        me.setuFWord (10, Integer.decode (e.getAttribute (&quot;v&quot;)).intValue()); }

      if (&quot;minLeftSideBearing&quot;.equals (e.getTagName ())) {
        me.setFWord (12, Integer.decode (e.getAttribute (&quot;v&quot;)).intValue()); }

      if (&quot;minRightSideBearing&quot;.equals (e.getTagName ())) {
        me.setFWord (14, Integer.decode (e.getAttribute (&quot;v&quot;)).intValue()); }

      if (&quot;xMaxExtent&quot;.equals (e.getTagName ())) {
        me.setFWord (16, Integer.decode (e.getAttribute (&quot;v&quot;)).intValue()); }

      if (&quot;caret&quot;.equals (e.getTagName ())) {
        me.setint16 (18, Integer.decode (e.getAttribute (&quot;slopeRise&quot;)).intValue());
        me.setint16 (20, Integer.decode (e.getAttribute (&quot;slopeRun&quot;)).intValue());
        me.setint16 (22, Integer.decode (e.getAttribute (&quot;offset&quot;)).intValue()); }

      if (&quot;numberOfHMetrics&quot;.equals (e.getTagName ())) {
        me.setint16 (34, Integer.decode (e.getAttribute (&quot;v&quot;)).intValue()); }}

    me.setint16 (24, 0);
    me.setint16 (26, 0);
    me.setint16 (28, 0);
    me.setint16 (30, 0);
    me.setint16 (32, 0);

    data = me.serialize ();
  }
</code-fragment>
      </section>

      <!--____________________________________________________________________-->
      <section role="decompiler">
        <title>Decompiler</title>

<code-fragment id="hhea.methods">
  public void toXML (DecompilerConfig conf)
      throws org.xml.sax.SAXException {

    AttributesImpl at;

    int [] version = getFixed (0);
    at = new AttributesImpl ();
    at.addAttribute (&quot;&quot;, &quot;major&quot;, &quot;major&quot;, &quot;CDATA&quot;, &quot;&quot; + version [0]);
    at.addAttribute (&quot;&quot;, &quot;minor&quot;, &quot;minor&quot;, &quot;CDATA&quot;, &quot;&quot; + version [1]);
    conf.ch.startElement (&quot;hhea&quot;, at); {

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;ascent&quot;, &quot;ascent&quot;, &quot;CDATA&quot;, &quot;&quot; + getFWord (4));
      at.addAttribute (&quot;&quot;, &quot;descent&quot;, &quot;descent&quot;, &quot;CDATA&quot;, &quot;&quot; + getFWord (6));
      at.addAttribute (&quot;&quot;, &quot;lineGap&quot;, &quot;lineGap&quot;, &quot;CDATA&quot;, &quot;&quot; +  getFWord (8));
      conf.ch.element (&quot;macLineMetrics&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;v&quot;, &quot;v&quot;, &quot;CDATA&quot;, &quot;&quot; +  getuFWord (10) );
      conf.ch.element (&quot;advanceWidthMax&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;v&quot;, &quot;v&quot;, &quot;CDATA&quot;, &quot;&quot; +  getFWord (12) );
      conf.ch.element (&quot;minLeftSideBearing&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;v&quot;, &quot;v&quot;, &quot;CDATA&quot;, &quot;&quot; +  getFWord (14) );
      conf.ch.element (&quot;minRightSideBearing&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;v&quot;, &quot;v&quot;, &quot;CDATA&quot;, &quot;&quot; +  getFWord (16) );
      conf.ch.element (&quot;xMaxExtent&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;slopeRise&quot;, &quot;slopeRise&quot;, &quot;CDATA&quot;, &quot;&quot; +  getint16 (18) );
      at.addAttribute (&quot;&quot;, &quot;slopeRun&quot;, &quot;slopeRun&quot;, &quot;CDATA&quot;, &quot;&quot; +  getint16 (20) );
      at.addAttribute (&quot;&quot;, &quot;offset&quot;, &quot;offset&quot;, &quot;CDATA&quot;, &quot;&quot; +  getint16 (22) );
      conf.ch.element (&quot;caret&quot;, at);

      at = new AttributesImpl ();
      at.addAttribute (&quot;&quot;, &quot;v&quot;, &quot;v&quot;, &quot;CDATA&quot;, &quot;&quot; + getNumberOfHMetrics ());
      conf.ch.element (&quot;numberOfHMetrics&quot;, at);

      conf.ch.endElement (&quot;hhea&quot;); }
  }
</code-fragment>
      </section>

      <!--________________________________________________________________-->
      <section role="implementation">
        <title>Implementation</title>

        <para>Here is the class definition for <ottable>hhea</ottable>
          tables:</para>

<code-fragment package="com.adobe.aots.CommonType" class="Hhea">
  <code-title>Hhea class</code-title>
package com.adobe.aots.CommonType;

import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.helpers.AttributesImpl;

import com.adobe.aots.util.ContentHandlerPlus;

public class Hhea extends Table {

  public Hhea () {
    super (Tag.hhea, null);
  }

  public Hhea (Font font) {
    super (Tag.hhea, font);
  }

  <code-include linkend="hhea.methods"/>
}
</code-fragment>


        <para>We have simple accessor functions:</para>

<code-fragment id="hhea.methods">
  <code-title>Hhea class</code-title>
  public int getAscender () {
    return getint16 (4);
  }

  public void setAscender (int v) {
    setint16 (4, v);
  }

  public int getDescender () {
    return getint16 (6);
  }

  public void setDescender (int v) {
    setint16 (6, v);
  }

  public int getLineGap () {
    return getint16 (8);
  }

  public void setLineGap (int v) {
    setint16 (8, v);
  }

  public int getAdvanceWidthMax () {
    return getuint16 (10);
  }

  public void setAdvanceWidthMax (int aw) {
    setuint16 (10, aw);
  }

  public int getMinLeftSideBearing () {
    return getuint16 (12);
  }

  public void setMinLeftSideBearing (int lsb) {
    setuint16 (12, lsb);
  }

  public int getMinRightSideBearing () {
    return getuint16 (14);
  }

  public void setMinRightSideBearing (int rsb) {
    setuint16 (14, rsb);
  }

  public int getXMaxExtent () {
    return getuint16 (14);
  }

  public void setXMaxExtent (int xme) {
    setuint16 (16, xme);
  }

  public int getNumberOfHMetrics () {
    return getuint16 (34);
  }

  public void setNumberOfHMetrics (int n) {
    setuint16 (34, n);
  }

</code-fragment>

<code-fragment id="hhea.methods">
  <code-title>Hhea class</code-title>
  public void fixDerivedValues () {
    int advanceWidthMax = 0;
    int minLeftSideBearing = Integer.MAX_VALUE;
    int minRightSideBearing = Integer.MAX_VALUE;
    int xMaxExtent = Integer.MIN_VALUE;

    for (int gid = 0; gid &lt; font.maxp.getNumGlyphs (); gid++) {
      int aw = font.hmtx.getHorizontalAdvance (gid);
      int lsb = font.hmtx.getLeftSideBearing (gid);
      BoundingBox bb
        = font.cff != null
        ? font.cff.getContoursBoundingBox (gid)
        : font.glyf.getGlyfBoundingBox (gid);
      int extent = (int) Math.ceil (bb.xmax - bb.xmin);

      advanceWidthMax = Math.max (advanceWidthMax, aw);
      minLeftSideBearing = Math.min (minLeftSideBearing, lsb);
      minRightSideBearing = Math.min (minRightSideBearing, aw - (lsb + extent));
      xMaxExtent = Math.max (xMaxExtent, lsb + extent); }

    setAdvanceWidthMax (advanceWidthMax);
    setMinLeftSideBearing (minLeftSideBearing);
    setMinRightSideBearing (minRightSideBearing);
    setXMaxExtent (xMaxExtent);
  }
</code-fragment>



      </section>
    </section>
  </section>
