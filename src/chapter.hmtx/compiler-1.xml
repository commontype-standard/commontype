<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section role="compiler">
      <title>Compiler</title>
      <code-fragment id="hmtx.methods">
  private class HMetric {
    int lsb;
    int adv;
    boolean hasAdvance;

    public HMetric (int adv, int lsb) {
      this.adv = adv;
      this.lsb = lsb;
      this.hasAdvance = true;
    }

    public HMetric (int lsb) {
      this.lsb = lsb;
      this.hasAdvance = false;
    }
  }

  public void fromXML (Element hmtx)
    throws InvalidFontException, UnsupportedFontException {

    NodeList metrics = hmtx.getChildNodes ();

    HMetric m [] = new HMetric [metrics.getLength ()];

    int hmetrics = 0;
    int lsbs = 0;

    for (int i = 0; i &lt; m.length; i++) {
      Element metric = (Element) metrics.item (i);

      int gid = Integer.decode (metric.getAttribute ("gid"));

      if (m.length &lt;= gid) {
         throw new InvalidFontException ("htmx: gid " + gid + " is too large"); }

      if (m [gid] != null) {
        throw new InvalidFontException ("duplicate gid " + gid + " in hmtx"); }

      if ("hMetric".equals (metric.getTagName ())) {
        m [gid] = new HMetric (Integer.decode (metric.getAttribute ("adv")).intValue (),
                               Integer.decode (metric.getAttribute ("lsb")).intValue ());
        hmetrics++; }

      else if ("lsb".equals (metric.getTagName ())) {
        m [gid] = new HMetric (Integer.decode (metric.getAttribute ("lsb")).intValue ());
        lsbs++; }}

    // verify that all lsbs are after all hmetric
    for (int gid = hmetrics; gid &lt; hmetrics + lsbs; gid++) {
      if (m [gid].hasAdvance) {
        throw new InvalidFontException ("htmx: gid " + gid + " has advance and is larger that first gid without advance " + hmetrics); }}

    Block me = new Block (hmetrics*4 + lsbs*2, 0);

    int offset = 0;

    for (int gid = 0; gid &lt; hmetrics; gid++) {
      me.setuint16 (offset, m [gid].adv);
      me.setuint16 (offset + 2, m [gid].lsb);
      offset += 4; }

    for (int gid = hmetrics; gid &lt; hmetrics + lsbs; gid++) {
      me.setuint16 (offset, m [gid].lsb);
      offset += 2; }

    data = me.serialize ();
  }
</code-fragment>
    </section>
    
