<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<section id="chapter.hmtx">
  <title>hmtx - Horizontal Metrics</title>
  <section role="fragment">
    <title>Introduction</title>
    <!--________________________________________________________________-->
    <section role="specification">
      <title>Specification</title>
      <para>The type longHorMetric is defined as an array where each
          element has two parts: the advance width, which is of type
          USHORT, and the left side bearing, which is of type SHORT.
          Or, more formally:</para>
      <literallayout>
typedef struct  _longHorMetric {
     USHORT advanceWidth;
     SHORT  lsb;
}  longHorMetric;
</literallayout>
      <otformat>
        <otfield>
          <otfieldoffs>0</otfieldoffs>
          <otfieldtype>longHorMetric [numberOfHMetrics]</otfieldtype>
          <otfieldname>hMetrics</otfieldname>
          <otfielddesc>Paired advance width and left side bearing
              values for each glyph. The value numOfHMetrics comes
              from the <ottable>hhea</ottable> table. If the font is
              monospaced, only one entry need be in the array, but
              that entry is required. The last entry applies to all
              subsequent glyphs.</otfielddesc>
        </otfield>
        <otfield>
          <otfieldoffs>??</otfieldoffs>
          <otfieldtype>FWord [ ]</otfieldtype>
          <otfieldname>leftSideBearing</otfieldname>
          <otfielddesc>Here the advanceWidth is assumed to be the
              same as the advanceWidth for the last entry above. The
              number of entries in this array is derived from
              numGlyphs (from <ottable>maxp</ottable> table) minus
              numberOfHMetrics. This generally is used with a run of
              monospaced glyphs (e.g., Kanji fonts or Courier fonts).
              Only one run is allowed and it must be at the end. This
              allows a monospaced font to vary the left side bearing
              values for each glyph.</otfielddesc>
        </otfield>
      </otformat>
      <para>In CFF CommonType fonts, every glyph's advanceWidth as
          recorded in the <ottable>hmtx</ottable> table must be identical to its x
          width in the <ottable>CFF</ottable> table.</para>
      <para>For any glyph, xmax and xmin are given in
          <ottable>glyf</ottable> table, lsb and aw are given in
          <ottable>hmtx</ottable> table. rsb is calculated as
          follows:</para>
      <literallayout>
rsb = aw - (lsb + xmax - xmin)
</literallayout>
      <para>If pp1 and pp2 are phantom points used to control lsb
          and rsb, their initial position in x is calculated as
          follows:</para>
      <literallayout>
pp1 = xmin - lsb
pp2 = pp1 + aw
</literallayout>
    </section>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="chapter.hmtx/xml-representation-1.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="chapter.hmtx/compiler-1.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="chapter.hmtx/decompiler-1.xml"/>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="chapter.hmtx/implementation-1.xml"/>
  </section>
</section>
